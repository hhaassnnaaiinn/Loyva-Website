---
import ImageMod from "@/components/ImageMod.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import CallToAction from "@/partials/CallToAction.astro";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";
import { getEntry } from "astro:content";

// Fetch contact data
const contact = (
  (await getEntry("contact", "-index")) as CollectionEntry<"contact">
).data;
const { title, description, meta_title, formContent, imageContent } = contact;
---

<Base title={title} meta_title={meta_title} description={description}>
  <section class="ph-spacing">
    <div class="container">
      <div class="flex md:flex-row-reverse flex-col-reverse gap-6 [&>div]:flex-1 [&>div]:grid">
        
        <!-- Contact Form Section -->
        <div class="md:w-[50%]" data-aos="fade-up-sm" data-aos-delay="200">
          <div class="bg-theme-light text-dark p-7 rounded-3xl">
            <div class="space-y-3">
              <div class="flex items-center gap-3">
                <Icon class="text-2xl" name={formContent.icon} />
                <span>{formContent.head}</span>
              </div>
              <h3>{formContent.title}</h3>
              <p>{formContent.subtitle}</p>
            </div>

            <!-- Contact Form -->
            <div class="mt-12">
              <form id="contactForm">
                <div class="form-control">
                  <label class="form-label" for="fullName">Full Name</label>
                  <input class="form-input" type="text" id="fullName" name="fullName" placeholder="John Doe" required />
                </div>

                <div class="form-control">
                  <label class="form-label" for="email">Email Address</label>
                  <input class="form-input" type="email" id="email" name="email" placeholder="Enter your mail" required />
                </div>

                <div class="form-control">
                  <label class="form-label" for="company">Company</label>
                  <input class="form-input" type="text" id="company" name="company" placeholder="Your company name" required />
                </div>

                <div class="form-control">
                  <label class="form-label" for="message">Message</label>
                  <textarea class="form-input h-auto" id="message" rows="3" name="message" placeholder="Type your messages" required></textarea>
                </div>

                {formContent.button?.enable && (
                  <button type="submit" class="btn btn-primary" id="submitBtn">
                    {formContent.button.label}
                  </button>
                )}

                <p id="formStatus" class="text-sm mt-3"></p>
              </form>
            </div>
          </div>
        </div>

        <!-- Image Section -->
        <div class="md:w-[50%]" data-aos="fade-up-sm" data-aos-delay="100">
          <div class="rounded-3xl overflow-hidden relative">
            <div class="img-shade-b-t isolate w-full h-full">
              <ImageMod
                width={600}
                height={774}
                src={imageContent.image}
                alt={imageContent.name}
                class="w-full h-full object-cover"
              />
            </div>

            <div class="absolute bottom-0 left-0 right-0 px-7 py-10 text-white">
              <p class="text-lg leading-relaxed w-5/6">{imageContent.content}</p>
              <div class="flex items-center gap-2 mt-6 pl-4">
                <div class="w-2 h-2 bg-white rounded-full"></div>
                <h3 class="text-lg font-medium text-white leading-none">{imageContent.name}</h3>
              </div>
              <p class="text-xs ml-8 mt-3">{imageContent.designation}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <CallToAction hasBackground={true} />

  <!-- Fixed TypeScript Errors -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
  // Select elements safely with type assertions
  const form = document.getElementById("contactForm") as HTMLFormElement | null;
  const submitBtn = document.getElementById("submitBtn") as HTMLButtonElement | null;
  const formStatus = document.getElementById("formStatus") as HTMLParagraphElement | null;

  if (!form || !submitBtn || !formStatus) return;

  // Handle form submission
  form.addEventListener("submit", async (event: Event) => {
    event.preventDefault();

    formStatus.textContent = "Sending...";
    submitBtn.disabled = true;

    const formData = new FormData(form);
    const jsonData = Object.fromEntries(formData.entries());

    try {
      const response = await fetch("/api/sendEmail", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(jsonData),
      });

      const result: { success: boolean; message: string } = await response.json();

      if (response.ok) {
        formStatus.textContent = "Message sent successfully!";
        form.reset(); // âœ… Now recognized as a form method
      } else {
        formStatus.textContent = result.message || "Error sending message.";
      }
    } catch (error) {
      formStatus.textContent = "Something went wrong. Please try again.";
    } finally {
      submitBtn.disabled = false;
    }
  });
});
  </script>
  
  
</Base>
