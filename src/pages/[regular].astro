---
import Base from "@/layouts/Base.astro";
import CallToAction from "@/partials/CallToAction.astro";
import PageHeader from "@/partials/PageHeader.astro";

// Fetch the slug from Astro params
const slug = Astro.params.regular;
const apiURL = import.meta.env.API_URL;

// Fetch the page dynamically via your custom API
const response = await fetch(`${apiURL}/api/getPage?slug=${slug}`);
let page = null;

if (response.ok) {
  page = await response.json();
} else {
  // If the page is not found, return a 404 response
  return new Response("Page not found", {
    status: 404,
    headers: { "Content-Type": "text/plain" },
  });
}

// Destructure and extract the required page data
const { title, meta_title, description, image } = page.data || {};
const { html: contentHtml } = page.rendered || {};

// Check if title and contentHtml are present
if (!title || !contentHtml) {
  return new Response("Page data is incomplete", {
    status: 404,
    headers: { "Content-Type": "text/plain" },
  });
}

---

<Base title={title} meta_title={meta_title} description={description} image={image}>
  <section class="ph-spacing">
    <PageHeader title={title} />
  </section>
  <section class="section-sm">
    <div class="container">
      <div class="row justify-center">
        <div class="lg:col-10">
          <div class="content" data-aos="fade-up-sm" data-aos-delay="200">
            <!-- Using Astro's html directive to render raw HTML content -->
            <div class="content" set:html={contentHtml} />
          </div>
        </div>
      </div>
    </div>
  </section>
  <CallToAction hasBackground={true} />
</Base>
